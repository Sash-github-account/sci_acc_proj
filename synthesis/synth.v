/* Generated by Yosys 0.9 (git sha1 UNKNOWN, clang 3.4.2 -fPIC -Os) */

(* dynports =  1  *)
(* src = "detect_pos_first_one.v:1" *)
module \$paramod\detect_pos_first_one\D_WIDTH=24 (data_i, pos_o);
  (* src = "detect_pos_first_one.v:4" *)
  input [23:0] data_i;
  (* src = "detect_pos_first_one.v:5" *)
  output [4:0] pos_o;
  reg [4:0] pos_o;
  always @*
    if (data_i[23])
      pos_o = 5'h00;
  always @*
    if (data_i[22])
      pos_o = 5'h01;
  always @*
    if (data_i[21])
      pos_o = 5'h02;
  always @*
    if (data_i[20])
      pos_o = 5'h03;
  always @*
    if (data_i[19])
      pos_o = 5'h04;
  always @*
    if (data_i[18])
      pos_o = 5'h05;
  always @*
    if (data_i[17])
      pos_o = 5'h06;
  always @*
    if (data_i[16])
      pos_o = 5'h07;
  always @*
    if (data_i[15])
      pos_o = 5'h08;
  always @*
    if (data_i[14])
      pos_o = 5'h09;
  always @*
    if (data_i[13])
      pos_o = 5'h0a;
  always @*
    if (data_i[12])
      pos_o = 5'h0b;
  always @*
    if (data_i[11])
      pos_o = 5'h0c;
  always @*
    if (data_i[10])
      pos_o = 5'h0d;
  always @*
    if (data_i[9])
      pos_o = 5'h0e;
  always @*
    if (data_i[8])
      pos_o = 5'h0f;
  always @*
    if (data_i[7])
      pos_o = 5'h10;
  always @*
    if (data_i[6])
      pos_o = 5'h11;
  always @*
    if (data_i[5])
      pos_o = 5'h12;
  always @*
    if (data_i[4])
      pos_o = 5'h13;
  always @*
    if (data_i[3])
      pos_o = 5'h14;
  always @*
    if (data_i[2])
      pos_o = 5'h15;
  always @*
    if (data_i[1])
      pos_o = 5'h16;
  always @*
    if (data_i[0])
      pos_o = 5'h17;
endmodule

(* dynports =  1  *)
(* src = "detect_pos_first_one.v:1" *)
module \$paramod\detect_pos_first_one\D_WIDTH=48 (data_i, pos_o);
  (* src = "detect_pos_first_one.v:4" *)
  input [47:0] data_i;
  (* src = "detect_pos_first_one.v:5" *)
  output [5:0] pos_o;
  reg [5:0] pos_o;
  always @*
    if (data_i[47])
      pos_o = 6'h00;
  always @*
    if (data_i[46])
      pos_o = 6'h01;
  always @*
    if (data_i[45])
      pos_o = 6'h02;
  always @*
    if (data_i[44])
      pos_o = 6'h03;
  always @*
    if (data_i[43])
      pos_o = 6'h04;
  always @*
    if (data_i[42])
      pos_o = 6'h05;
  always @*
    if (data_i[41])
      pos_o = 6'h06;
  always @*
    if (data_i[40])
      pos_o = 6'h07;
  always @*
    if (data_i[39])
      pos_o = 6'h08;
  always @*
    if (data_i[38])
      pos_o = 6'h09;
  always @*
    if (data_i[37])
      pos_o = 6'h0a;
  always @*
    if (data_i[36])
      pos_o = 6'h0b;
  always @*
    if (data_i[35])
      pos_o = 6'h0c;
  always @*
    if (data_i[34])
      pos_o = 6'h0d;
  always @*
    if (data_i[33])
      pos_o = 6'h0e;
  always @*
    if (data_i[32])
      pos_o = 6'h0f;
  always @*
    if (data_i[31])
      pos_o = 6'h10;
  always @*
    if (data_i[30])
      pos_o = 6'h11;
  always @*
    if (data_i[29])
      pos_o = 6'h12;
  always @*
    if (data_i[28])
      pos_o = 6'h13;
  always @*
    if (data_i[27])
      pos_o = 6'h14;
  always @*
    if (data_i[26])
      pos_o = 6'h15;
  always @*
    if (data_i[25])
      pos_o = 6'h16;
  always @*
    if (data_i[24])
      pos_o = 6'h17;
  always @*
    if (data_i[23])
      pos_o = 6'h18;
  always @*
    if (data_i[22])
      pos_o = 6'h19;
  always @*
    if (data_i[21])
      pos_o = 6'h1a;
  always @*
    if (data_i[20])
      pos_o = 6'h1b;
  always @*
    if (data_i[19])
      pos_o = 6'h1c;
  always @*
    if (data_i[18])
      pos_o = 6'h1d;
  always @*
    if (data_i[17])
      pos_o = 6'h1e;
  always @*
    if (data_i[16])
      pos_o = 6'h1f;
  always @*
    if (data_i[15])
      pos_o = 6'h20;
  always @*
    if (data_i[14])
      pos_o = 6'h21;
  always @*
    if (data_i[13])
      pos_o = 6'h22;
  always @*
    if (data_i[12])
      pos_o = 6'h23;
  always @*
    if (data_i[11])
      pos_o = 6'h24;
  always @*
    if (data_i[10])
      pos_o = 6'h25;
  always @*
    if (data_i[9])
      pos_o = 6'h26;
  always @*
    if (data_i[8])
      pos_o = 6'h27;
  always @*
    if (data_i[7])
      pos_o = 6'h28;
  always @*
    if (data_i[6])
      pos_o = 6'h29;
  always @*
    if (data_i[5])
      pos_o = 6'h2a;
  always @*
    if (data_i[4])
      pos_o = 6'h2b;
  always @*
    if (data_i[3])
      pos_o = 6'h2c;
  always @*
    if (data_i[2])
      pos_o = 6'h2d;
  always @*
    if (data_i[1])
      pos_o = 6'h2e;
  always @*
    if (data_i[0])
      pos_o = 6'h2f;
endmodule

(* dynports =  1  *)
(* src = "accumulator.v:5" *)
module accumulator(clk, rst_n, data_in, stg_en, accum_data_out);
  (* src = "accumulator.v:22" *)
  wire [31:0] _0_;
  wire [31:0] _1_;
  (* src = "accumulator.v:10" *)
  output [31:0] accum_data_out;
  reg [31:0] accum_data_out;
  (* src = "accumulator.v:6" *)
  input clk;
  (* src = "accumulator.v:8" *)
  input [31:0] data_in;
  (* src = "accumulator.v:7" *)
  input rst_n;
  (* src = "accumulator.v:9" *)
  input stg_en;
  always @(posedge clk)
      accum_data_out <= _0_;
  assign _1_ = stg_en ? (* full_case = 32'd1 *) (* src = "accumulator.v:27" *) data_in : 32'd1065353216;
  assign _0_ = rst_n ? (* full_case = 32'd1 *) (* src = "accumulator.v:23" *) 32'd1065353216 : _1_;
endmodule

(* dynports =  1  *)
(* src = "coeff_rom.v:5" *)
module coeff_rom(clk, rst_n, rd, rd_addr, coeff_out);
  (* src = "coeff_rom.v:106" *)
  wire [31:0] _000_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _001_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _002_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _003_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _004_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _005_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _006_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _007_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _008_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _009_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _010_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _011_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _012_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _013_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _014_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _015_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _016_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _017_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _018_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _019_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _020_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _021_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _022_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _023_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _024_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _025_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _026_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _027_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _028_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _029_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _030_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _031_;
  (* src = "coeff_rom.v:28" *)
  wire [31:0] _032_;
  (* src = "coeff_rom.v:106" *)
  wire [31:0] _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire [31:0] _068_;
  (* src = "coeff_rom.v:6" *)
  input clk;
  (* src = "coeff_rom.v:10" *)
  output [31:0] coeff_out;
  reg [31:0] coeff_out;
  (* src = "coeff_rom.v:5" *)
  wire [31:0] \coeff_rom[0] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[10] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[11] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[12] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[13] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[14] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[15] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[16] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[17] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[18] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[19] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[1] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[20] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[21] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[22] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[23] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[24] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[25] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[26] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[27] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[28] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[29] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[2] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[30] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[31] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[32] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[3] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[4] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[5] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[6] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[7] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[8] ;
  (* src = "coeff_rom.v:5" *)
  reg [31:0] \coeff_rom[9] ;
  (* src = "coeff_rom.v:8" *)
  input rd;
  (* src = "coeff_rom.v:9" *)
  input [5:0] rd_addr;
  (* src = "coeff_rom.v:7" *)
  input rst_n;
  assign _034_ = | { _066_, _067_ };
  always @(posedge clk)
      coeff_out <= _000_;
  always @(posedge clk)
      \coeff_rom[2]  <= _022_;
  always @(posedge clk)
      \coeff_rom[4]  <= _027_;
  always @(posedge clk)
      \coeff_rom[1]  <= _001_;
  always @(posedge clk)
      \coeff_rom[3]  <= _026_;
  always @(posedge clk)
      \coeff_rom[5]  <= _028_;
  always @(posedge clk)
      \coeff_rom[6]  <= _029_;
  always @(posedge clk)
      \coeff_rom[7]  <= _030_;
  always @(posedge clk)
      \coeff_rom[8]  <= _031_;
  always @(posedge clk)
      \coeff_rom[9]  <= _032_;
  always @(posedge clk)
      \coeff_rom[10]  <= _002_;
  always @(posedge clk)
      \coeff_rom[11]  <= _003_;
  always @(posedge clk)
      \coeff_rom[12]  <= _004_;
  always @(posedge clk)
      \coeff_rom[13]  <= _005_;
  always @(posedge clk)
      \coeff_rom[14]  <= _006_;
  always @(posedge clk)
      \coeff_rom[15]  <= _007_;
  always @(posedge clk)
      \coeff_rom[16]  <= _008_;
  always @(posedge clk)
      \coeff_rom[17]  <= _009_;
  always @(posedge clk)
      \coeff_rom[18]  <= _010_;
  always @(posedge clk)
      \coeff_rom[19]  <= _011_;
  always @(posedge clk)
      \coeff_rom[20]  <= _012_;
  always @(posedge clk)
      \coeff_rom[21]  <= _013_;
  always @(posedge clk)
      \coeff_rom[22]  <= _014_;
  always @(posedge clk)
      \coeff_rom[23]  <= _015_;
  always @(posedge clk)
      \coeff_rom[24]  <= _016_;
  always @(posedge clk)
      \coeff_rom[25]  <= _017_;
  always @(posedge clk)
      \coeff_rom[26]  <= _018_;
  always @(posedge clk)
      \coeff_rom[27]  <= _019_;
  always @(posedge clk)
      \coeff_rom[28]  <= _020_;
  always @(posedge clk)
      \coeff_rom[29]  <= _021_;
  always @(posedge clk)
      \coeff_rom[30]  <= _023_;
  always @(posedge clk)
      \coeff_rom[31]  <= _024_;
  always @(posedge clk)
      \coeff_rom[32]  <= _025_;
  function [31:0] _103_;
    input [31:0] a;
    input [1023:0] b;
    input [31:0] s;
    (* full_case = 32'd1 *)
    (* src = "coeff_rom.v:5" *)
    (* parallel_case *)
    casez (s)
      32'b???????????????????????????????1:
        _103_ = b[31:0];
      32'b??????????????????????????????1?:
        _103_ = b[63:32];
      32'b?????????????????????????????1??:
        _103_ = b[95:64];
      32'b????????????????????????????1???:
        _103_ = b[127:96];
      32'b???????????????????????????1????:
        _103_ = b[159:128];
      32'b??????????????????????????1?????:
        _103_ = b[191:160];
      32'b?????????????????????????1??????:
        _103_ = b[223:192];
      32'b????????????????????????1???????:
        _103_ = b[255:224];
      32'b???????????????????????1????????:
        _103_ = b[287:256];
      32'b??????????????????????1?????????:
        _103_ = b[319:288];
      32'b?????????????????????1??????????:
        _103_ = b[351:320];
      32'b????????????????????1???????????:
        _103_ = b[383:352];
      32'b???????????????????1????????????:
        _103_ = b[415:384];
      32'b??????????????????1?????????????:
        _103_ = b[447:416];
      32'b?????????????????1??????????????:
        _103_ = b[479:448];
      32'b????????????????1???????????????:
        _103_ = b[511:480];
      32'b???????????????1????????????????:
        _103_ = b[543:512];
      32'b??????????????1?????????????????:
        _103_ = b[575:544];
      32'b?????????????1??????????????????:
        _103_ = b[607:576];
      32'b????????????1???????????????????:
        _103_ = b[639:608];
      32'b???????????1????????????????????:
        _103_ = b[671:640];
      32'b??????????1?????????????????????:
        _103_ = b[703:672];
      32'b?????????1??????????????????????:
        _103_ = b[735:704];
      32'b????????1???????????????????????:
        _103_ = b[767:736];
      32'b???????1????????????????????????:
        _103_ = b[799:768];
      32'b??????1?????????????????????????:
        _103_ = b[831:800];
      32'b?????1??????????????????????????:
        _103_ = b[863:832];
      32'b????1???????????????????????????:
        _103_ = b[895:864];
      32'b???1????????????????????????????:
        _103_ = b[927:896];
      32'b??1?????????????????????????????:
        _103_ = b[959:928];
      32'b?1??????????????????????????????:
        _103_ = b[991:960];
      32'b1???????????????????????????????:
        _103_ = b[1023:992];
      default:
        _103_ = a;
    endcase
  endfunction
  assign _033_ = _103_(32'hxxxxxxxx, { \coeff_rom[1] , \coeff_rom[2] , \coeff_rom[3] , \coeff_rom[4] , \coeff_rom[5] , \coeff_rom[6] , \coeff_rom[7] , \coeff_rom[8] , \coeff_rom[9] , \coeff_rom[10] , \coeff_rom[11] , \coeff_rom[12] , \coeff_rom[13] , \coeff_rom[14] , \coeff_rom[15] , \coeff_rom[16] , \coeff_rom[17] , \coeff_rom[18] , \coeff_rom[19] , \coeff_rom[20] , \coeff_rom[21] , \coeff_rom[22] , \coeff_rom[23] , \coeff_rom[24] , \coeff_rom[25] , \coeff_rom[26] , \coeff_rom[27] , \coeff_rom[28] , \coeff_rom[29] , \coeff_rom[30] , \coeff_rom[31] , \coeff_rom[32]  }, { _034_, _065_, _064_, _063_, _062_, _061_, _060_, _059_, _058_, _057_, _056_, _055_, _054_, _053_, _052_, _051_, _050_, _049_, _048_, _047_, _046_, _045_, _044_, _043_, _042_, _041_, _040_, _039_, _038_, _037_, _036_, _035_ });
  assign _035_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h20;
  assign _036_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h1f;
  assign _037_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h1e;
  assign _038_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h1d;
  assign _039_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h1c;
  assign _040_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h1b;
  assign _041_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h1a;
  assign _042_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h19;
  assign _043_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h18;
  assign _044_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h17;
  assign _045_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h16;
  assign _046_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h15;
  assign _047_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h14;
  assign _048_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h13;
  assign _049_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h12;
  assign _050_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h11;
  assign _051_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h10;
  assign _052_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h0f;
  assign _053_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h0e;
  assign _054_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h0d;
  assign _055_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h0c;
  assign _056_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h0b;
  assign _057_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h0a;
  assign _058_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h09;
  assign _059_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h08;
  assign _060_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h07;
  assign _061_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h06;
  assign _062_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h05;
  assign _063_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h04;
  assign _064_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h03;
  assign _065_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h02;
  assign _066_ = rd_addr == (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) 6'h01;
  assign _067_ = ! (* full_case = 32'd1 *) (* src = "coeff_rom.v:5" *) rd_addr;
  assign _068_ = rd ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:111" *) _033_ : coeff_out;
  assign _000_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:107" *) 32'd0 : _068_;
  assign _025_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd77702807;
  assign _024_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd119645847;
  assign _023_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd161257826;
  assign _021_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd202559436;
  assign _020_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd243600465;
  assign _019_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd283694478;
  assign _018_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd323253296;
  assign _017_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd362782311;
  assign _016_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd402220929;
  assign _015_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd440077729;
  assign _014_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd478573003;
  assign _013_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd515431544;
  assign _012_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd552771933;
  assign _011_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd588752090;
  assign _010_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd624169923;
  assign _009_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd659199548;
  assign _008_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd693583775;
  assign _007_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd727138207;
  assign _006_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd759810982;
  assign _005_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd791712305;
  assign _004_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd823097032;
  assign _003_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd852963883;
  assign _002_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd882111102;
  assign _032_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd909700885;
  assign _031_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd936381693;
  assign _030_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd961547520;
  assign _029_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd985008993;
  assign _028_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd1007192201;
  assign _026_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd1042983595;
  assign _001_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd1065353216;
  assign _027_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd1026206379;
  assign _022_ = rst_n ? (* full_case = 32'd1 *) (* src = "coeff_rom.v:29" *) 32'd0 : 32'd1056964608;
  assign \coeff_rom[0]  = \coeff_rom[1] ;
endmodule

(* dynports =  1  *)
(* src = "control_fsm.v:5" *)
module control_fsm(clk, rst_n, op_pkt_available, mode, res, term_cnt, done, rd_fifo, op, stg1_en, stg2_en, start_cnt, rd_coeff);
  (* src = "control_fsm.v:55" *)
  wire _00_;
  (* src = "control_fsm.v:55" *)
  wire _01_;
  (* src = "control_fsm.v:55" *)
  wire _02_;
  (* src = "control_fsm.v:55" *)
  wire _03_;
  (* src = "control_fsm.v:55" *)
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire [4:0] _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* src = "control_fsm.v:110" *)
  wire _21_;
  (* src = "control_fsm.v:110" *)
  wire _22_;
  (* src = "control_fsm.v:110" *)
  wire _23_;
  (* src = "control_fsm.v:115" *)
  wire _24_;
  (* src = "control_fsm.v:110" *)
  wire _25_;
  (* src = "control_fsm.v:110" *)
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  (* src = "control_fsm.v:115" *)
  wire [31:0] _32_;
  (* src = "control_fsm.v:6" *)
  input clk;
  (* onehot = 32'd1 *)
  reg [4:0] cur_state;
  (* src = "control_fsm.v:13" *)
  output done;
  reg done;
  (* src = "control_fsm.v:9" *)
  input [2:0] mode;
  (* src = "control_fsm.v:15" *)
  output op;
  (* src = "control_fsm.v:8" *)
  input op_pkt_available;
  (* src = "control_fsm.v:19" *)
  output rd_coeff;
  reg rd_coeff;
  (* src = "control_fsm.v:14" *)
  output rd_fifo;
  reg rd_fifo;
  (* src = "control_fsm.v:10" *)
  input [3:0] res;
  (* src = "control_fsm.v:7" *)
  input rst_n;
  (* src = "control_fsm.v:18" *)
  output start_cnt;
  reg start_cnt;
  (* src = "control_fsm.v:16" *)
  output stg1_en;
  (* src = "control_fsm.v:17" *)
  output stg2_en;
  reg stg2_en;
  (* src = "control_fsm.v:11" *)
  input [3:0] term_cnt;
  assign _05_ = _13_ & cur_state[0];
  assign _06_ = _14_ & cur_state[2];
  assign _07_ = _15_ & cur_state[4];
  assign _08_ = _16_ & cur_state[3];
  assign _09_ = _17_ & cur_state[0];
  assign _10_ = _18_ & cur_state[2];
  assign _11_ = _19_ & cur_state[4];
  assign _12_[0] = | { rst_n, _06_, _05_, cur_state[1] };
  assign _12_[4] = | { _10_, _11_ };
  always @(posedge clk)
      cur_state <= { _12_[4], _09_, _08_, _07_, _12_[0] };
  assign _13_ = ! { op_pkt_available, rst_n };
  assign _14_ = ! { _26_, rst_n };
  assign _15_ = ! { _24_, rst_n };
  assign _16_ = ~ rst_n;
  assign _17_ = { op_pkt_available, rst_n } == 2'h2;
  assign _18_ = { _26_, rst_n } == 2'h2;
  assign _19_ = { _24_, rst_n } == 2'h2;
  assign _20_ = | { cur_state[2], cur_state[4] };
  assign _21_ = mode == (* src = "control_fsm.v:110" *) 3'h1;
  assign _22_ = mode == (* src = "control_fsm.v:110" *) 3'h2;
  assign _23_ = mode == (* src = "control_fsm.v:110" *) 3'h4;
  assign _24_ = term_cnt < (* src = "control_fsm.v:115" *) _32_;
  assign _25_ = _21_ | (* src = "control_fsm.v:110" *) _22_;
  assign _26_ = _25_ | (* src = "control_fsm.v:110" *) _23_;
  always @(posedge clk)
      stg2_en <= _04_;
  always @(posedge clk)
      rd_fifo <= _02_;
  always @(posedge clk)
      start_cnt <= _03_;
  always @(posedge clk)
      done <= _00_;
  always @(posedge clk)
      rd_coeff <= _01_;
  assign _27_ = cur_state[3] ? (* full_case = 32'd1 *) (* src = "control_fsm.v:70|control_fsm.v:65" *) 1'h1 : 1'h0;
  assign _02_ = rst_n ? (* full_case = 32'd1 *) (* src = "control_fsm.v:56" *) rd_fifo : _27_;
  assign _28_ = cur_state[4] ? (* full_case = 32'd1 *) (* src = "control_fsm.v:78|control_fsm.v:65" *) 1'h1 : 1'h0;
  assign _04_ = rst_n ? (* full_case = 32'd1 *) (* src = "control_fsm.v:56" *) 1'h0 : _28_;
  assign _30_ = cur_state[1] ? (* full_case = 32'd1 *) (* src = "control_fsm.v:82|control_fsm.v:65" *) 1'h1 : 1'h0;
  assign _00_ = rst_n ? (* full_case = 32'd1 *) (* src = "control_fsm.v:56" *) 1'h0 : _30_;
  assign _31_ = cur_state[2] ? (* full_case = 32'd1 *) (* src = "control_fsm.v:74|control_fsm.v:65" *) 1'h1 : 1'h0;
  assign _03_ = rst_n ? (* full_case = 32'd1 *) (* src = "control_fsm.v:56" *) start_cnt : _31_;
  assign _29_ = _20_ ? (* full_case = 32'd1 *) (* src = "control_fsm.v:78|control_fsm.v:65" *) 1'h1 : 1'h0;
  assign _01_ = rst_n ? (* full_case = 32'd1 *) (* src = "control_fsm.v:56" *) 1'h0 : _29_;
  assign _32_ = res - (* src = "control_fsm.v:115" *) 32'd2;
  assign _12_[3:1] = { _09_, _08_, _07_ };
  assign op = 1'h0;
  assign stg1_en = rd_coeff;
endmodule

(* dynports =  1  *)
(* src = "detect_pos_first_one.v:1" *)
module detect_pos_first_one(data_i, pos_o);
  (* src = "detect_pos_first_one.v:4" *)
  input [15:0] data_i;
  (* src = "detect_pos_first_one.v:5" *)
  output [3:0] pos_o;
  reg [3:0] pos_o;
  always @*
    if (data_i[15])
      pos_o = 4'h0;
  always @*
    if (data_i[14])
      pos_o = 4'h1;
  always @*
    if (data_i[13])
      pos_o = 4'h2;
  always @*
    if (data_i[12])
      pos_o = 4'h3;
  always @*
    if (data_i[11])
      pos_o = 4'h4;
  always @*
    if (data_i[10])
      pos_o = 4'h5;
  always @*
    if (data_i[9])
      pos_o = 4'h6;
  always @*
    if (data_i[8])
      pos_o = 4'h7;
  always @*
    if (data_i[7])
      pos_o = 4'h8;
  always @*
    if (data_i[6])
      pos_o = 4'h9;
  always @*
    if (data_i[5])
      pos_o = 4'ha;
  always @*
    if (data_i[4])
      pos_o = 4'hb;
  always @*
    if (data_i[3])
      pos_o = 4'hc;
  always @*
    if (data_i[2])
      pos_o = 4'hd;
  always @*
    if (data_i[1])
      pos_o = 4'he;
  always @*
    if (data_i[0])
      pos_o = 4'hf;
endmodule

(* dynports =  1  *)
(* src = "fp_arith.v:5" *)
module fp_arith(data_1, data_2, op_sel, en, data_o);
  (* src = "fp_arith.v:84" *)
  wire [31:0] _00_;
  wire _01_;
  wire _02_;
  (* src = "fp_arith.v:74" *)
  wire _03_;
  (* src = "fp_arith.v:74" *)
  wire _04_;
  (* src = "fp_arith.v:74" *)
  wire _05_;
  (* src = "fp_arith.v:73" *)
  wire _06_;
  (* src = "fp_arith.v:73" *)
  wire _07_;
  (* src = "fp_arith.v:73" *)
  wire _08_;
  (* src = "fp_arith.v:112" *)
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire [22:0] _19_;
  wire [22:0] _20_;
  wire [22:0] _21_;
  wire [7:0] _22_;
  wire [7:0] _23_;
  wire [7:0] _24_;
  (* src = "fp_arith.v:55" *)
  wire _25_;
  (* src = "fp_arith.v:73" *)
  wire _26_;
  (* src = "fp_arith.v:73" *)
  wire _27_;
  (* src = "fp_arith.v:73" *)
  wire _28_;
  (* src = "fp_arith.v:73" *)
  wire _29_;
  (* src = "fp_arith.v:74" *)
  wire [23:0] _30_;
  (* src = "fp_arith.v:74" *)
  wire [23:0] _31_;
  (* src = "fp_arith.v:74" *)
  wire [23:0] _32_;
  (* src = "fp_arith.v:74" *)
  wire [23:0] _33_;
  (* src = "fp_arith.v:75" *)
  wire [23:0] _34_;
  (* src = "fp_arith.v:75" *)
  wire [23:0] _35_;
  (* src = "fp_arith.v:75" *)
  wire [23:0] _36_;
  (* src = "fp_arith.v:75" *)
  wire [23:0] _37_;
  (* src = "fp_arith.v:83" *)
  (* unused_bits = "23 24" *)
  wire [24:0] _38_;
  (* src = "fp_arith.v:84" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _39_;
  (* src = "fp_arith.v:55" *)
  wire [7:0] _40_;
  (* src = "fp_arith.v:6" *)
  input [31:0] data_1;
  (* src = "fp_arith.v:39" *)
  wire data_1_exp_greater;
  (* src = "fp_arith.v:24" *)
  wire [23:0] data_1_mantissa;
  (* src = "fp_arith.v:7" *)
  input [31:0] data_2;
  (* src = "fp_arith.v:25" *)
  wire [23:0] data_2_mantissa;
  (* src = "fp_arith.v:10" *)
  output [31:0] data_o;
  (* src = "fp_arith.v:36" *)
  wire [23:0] data_to_shift;
  (* src = "fp_arith.v:30" *)
  wire [7:0] diff_exp_out;
  (* src = "fp_arith.v:27" *)
  (* unused_bits = "23" *)
  wire [23:0] diff_final_mantissa;
  (* src = "fp_arith.v:41" *)
  wire [4:0] diff_shift_by;
  (* src = "fp_arith.v:9" *)
  input en;
  (* src = "fp_arith.v:28" *)
  wire [7:0] exp_diff;
  (* src = "fp_arith.v:29" *)
  wire [7:0] exp_out;
  (* src = "fp_arith.v:40" *)
  wire final_data_1_greater;
  (* src = "fp_arith.v:32" *)
  wire [23:0] first_opnd;
  (* src = "fp_arith.v:34" *)
  wire [7:0] first_opnd_exp;
  (* src = "fp_arith.v:42" *)
  wire [1:0] mux_ctrl_bits;
  (* src = "fp_arith.v:8" *)
  input op_sel;
  (* src = "fp_arith.v:31" *)
  wire [7:0] ovrfl_exp_out;
  (* src = "fp_arith.v:33" *)
  wire [23:0] second_opnd;
  (* src = "fp_arith.v:35" *)
  wire [7:0] second_opnd_exp;
  (* src = "fp_arith.v:37" *)
  wire [23:0] shifted_data;
  (* src = "fp_arith.v:26" *)
  (* unused_bits = "23" *)
  wire [23:0] sum_final_mantissa;
  (* src = "fp_arith.v:23" *)
  wire [23:0] temp_diff;
  (* src = "fp_arith.v:22" *)
  wire [24:0] temp_sum;
  assign temp_sum = first_opnd + (* src = "fp_arith.v:82" *) second_opnd;
  assign _00_ = exp_out + (* src = "fp_arith.v:84" *) 32'd1;
  assign _01_ = | { _12_, _18_ };
  assign _02_ = | { _14_, _16_ };
  assign _03_ = { 1'h1, data_1[22:0] } >= (* src = "fp_arith.v:75" *) { 1'h1, data_2[22:0] };
  assign _04_ = { 1'h1, data_1[22:0] } >= (* src = "fp_arith.v:75" *) shifted_data;
  assign _05_ = { 1'h1, data_2[22:0] } >= (* src = "fp_arith.v:75" *) shifted_data;
  assign data_1_exp_greater = data_1[30:23] > (* src = "fp_arith.v:56" *) data_2[30:23];
  assign _06_ = { 1'h1, data_1[22:0] } > (* src = "fp_arith.v:73" *) { 1'h1, data_2[22:0] };
  assign _07_ = { 1'h1, data_1[22:0] } > (* src = "fp_arith.v:73" *) shifted_data;
  assign _08_ = { 1'h1, data_2[22:0] } > (* src = "fp_arith.v:73" *) shifted_data;
  assign _09_ = ~ (* src = "fp_arith.v:120" *) final_data_1_greater;
  assign _10_ = op_sel ? (* full_case = 32'd1 *) (* src = "fp_arith.v:145" *) final_data_1_greater : 1'h1;
  function [0:0] _54_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "fp_arith.v:144|fp_arith.v:104" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _54_ = b[0:0];
      4'b??1?:
        _54_ = b[1:1];
      4'b?1??:
        _54_ = b[2:2];
      4'b1???:
        _54_ = b[3:3];
      default:
        _54_ = a;
    endcase
  endfunction
  assign _11_ = _54_(1'hx, { _17_, _15_, _13_, _10_ }, { _18_, _16_, _14_, _12_ });
  assign _13_ = op_sel ? (* full_case = 32'd1 *) (* src = "fp_arith.v:132" *) 1'h1 : final_data_1_greater;
  assign _15_ = op_sel ? (* full_case = 32'd1 *) (* src = "fp_arith.v:119" *) 1'h0 : _09_;
  assign _17_ = op_sel ? (* full_case = 32'd1 *) (* src = "fp_arith.v:106" *) _09_ : 1'h0;
  assign data_o[31] = en ? (* full_case = 32'd1 *) (* src = "fp_arith.v:103" *) _11_ : 1'h0;
  assign _19_ = op_sel ? (* full_case = 32'd1 *) (* src = "fp_arith.v:145" *) diff_final_mantissa[22:0] : sum_final_mantissa[22:0];
  function [22:0] _60_;
    input [22:0] a;
    input [45:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "fp_arith.v:144|fp_arith.v:104" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _60_ = b[22:0];
      2'b1?:
        _60_ = b[45:23];
      default:
        _60_ = a;
    endcase
  endfunction
  assign _20_ = _60_(23'hxxxxxx, { _21_, _19_ }, { _02_, _01_ });
  assign _21_ = op_sel ? (* full_case = 32'd1 *) (* src = "fp_arith.v:119" *) sum_final_mantissa[22:0] : diff_final_mantissa[22:0];
  assign _18_ = ! (* full_case = 32'd1 *) (* src = "fp_arith.v:105|fp_arith.v:104" *) { data_1[31], data_2[31] };
  assign data_o[22:0] = en ? (* full_case = 32'd1 *) (* src = "fp_arith.v:103" *) _20_ : 23'h000000;
  assign _22_ = op_sel ? (* full_case = 32'd1 *) (* src = "fp_arith.v:145" *) diff_exp_out : ovrfl_exp_out;
  function [7:0] _65_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "fp_arith.v:144|fp_arith.v:104" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _65_ = b[7:0];
      2'b1?:
        _65_ = b[15:8];
      default:
        _65_ = a;
    endcase
  endfunction
  assign _23_ = _65_(8'hxx, { _24_, _22_ }, { _02_, _01_ });
  assign _12_ = { data_1[31], data_2[31] } == (* full_case = 32'd1 *) (* src = "fp_arith.v:144|fp_arith.v:104" *) 2'h3;
  assign _14_ = { data_1[31], data_2[31] } == (* full_case = 32'd1 *) (* src = "fp_arith.v:131|fp_arith.v:104" *) 2'h2;
  assign _24_ = op_sel ? (* full_case = 32'd1 *) (* src = "fp_arith.v:119" *) ovrfl_exp_out : diff_exp_out;
  assign _16_ = { data_1[31], data_2[31] } == (* full_case = 32'd1 *) (* src = "fp_arith.v:118|fp_arith.v:104" *) 2'h1;
  assign data_o[30:23] = en ? (* full_case = 32'd1 *) (* src = "fp_arith.v:103" *) _23_ : 8'h7f;
  assign _25_ = | (* src = "fp_arith.v:55" *) { _40_[0], _40_[1], _40_[2], _40_[3], _40_[4], _40_[5], _40_[6], _40_[7] };
  assign diff_final_mantissa = temp_diff << (* src = "fp_arith.v:92" *) diff_shift_by;
  assign shifted_data = data_to_shift >> (* src = "fp_arith.v:67" *) exp_diff;
  assign exp_diff = first_opnd_exp - (* src = "fp_arith.v:60" *) second_opnd_exp;
  assign temp_diff = first_opnd - (* src = "fp_arith.v:90" *) second_opnd;
  assign diff_exp_out = exp_out - (* src = "fp_arith.v:93" *) diff_shift_by;
  assign exp_out = _25_ ? (* src = "fp_arith.v:57" *) first_opnd_exp : data_1[30:23];
  assign first_opnd_exp = data_1_exp_greater ? (* src = "fp_arith.v:58" *) data_1[30:23] : data_2[30:23];
  assign second_opnd_exp = data_1_exp_greater ? (* src = "fp_arith.v:59" *) data_2[30:23] : data_1[30:23];
  assign data_to_shift = data_1_exp_greater ? (* src = "fp_arith.v:66" *) { 1'h1, data_2[22:0] } : { 1'h1, data_1[22:0] };
  assign _26_ = _06_ ? (* src = "fp_arith.v:73" *) 1'h1 : 1'h0;
  assign _27_ = _07_ ? (* src = "fp_arith.v:73" *) 1'h1 : 1'h0;
  assign _28_ = _08_ ? (* src = "fp_arith.v:73" *) 1'h0 : 1'h1;
  assign _29_ = data_1_exp_greater ? (* src = "fp_arith.v:73" *) _27_ : _28_;
  assign final_data_1_greater = _25_ ? (* src = "fp_arith.v:73" *) _29_ : _26_;
  assign _30_ = _03_ ? (* src = "fp_arith.v:74" *) { 1'h1, data_1[22:0] } : { 1'h1, data_2[22:0] };
  assign _31_ = _04_ ? (* src = "fp_arith.v:74" *) { 1'h1, data_1[22:0] } : shifted_data;
  assign _32_ = _05_ ? (* src = "fp_arith.v:74" *) { 1'h1, data_2[22:0] } : shifted_data;
  assign _33_ = data_1_exp_greater ? (* src = "fp_arith.v:74" *) _31_ : _32_;
  assign first_opnd = _25_ ? (* src = "fp_arith.v:74" *) _33_ : _30_;
  assign _34_ = _03_ ? (* src = "fp_arith.v:75" *) { 1'h1, data_2[22:0] } : { 1'h1, data_1[22:0] };
  assign _35_ = _04_ ? (* src = "fp_arith.v:75" *) shifted_data : { 1'h1, data_1[22:0] };
  assign _36_ = _05_ ? (* src = "fp_arith.v:75" *) shifted_data : { 1'h1, data_2[22:0] };
  assign _37_ = data_1_exp_greater ? (* src = "fp_arith.v:75" *) _35_ : _36_;
  assign second_opnd = _25_ ? (* src = "fp_arith.v:75" *) _37_ : _34_;
  assign { _38_[24], sum_final_mantissa } = temp_sum[24] ? (* src = "fp_arith.v:83" *) { 2'h1, temp_sum[23:1] } : { 1'h0, temp_sum[23:0] };
  assign { _39_[31:8], ovrfl_exp_out } = temp_sum[24] ? (* src = "fp_arith.v:84" *) _00_ : { 24'h000000, exp_out };
  assign _40_ = data_1[30:23] ^ (* src = "fp_arith.v:55" *) data_2[30:23];
  (* src = "fp_arith.v:91" *)
  \$paramod\detect_pos_first_one\D_WIDTH=24  num_to_shift (
    .data_i(temp_diff),
    .pos_o(diff_shift_by)
  );
  assign _38_[23:0] = sum_final_mantissa;
  assign _39_[7:0] = ovrfl_exp_out;
  assign data_1_mantissa = { 1'h1, data_1[22:0] };
  assign data_2_mantissa = { 1'h1, data_2[22:0] };
  assign mux_ctrl_bits = { data_1[31], data_2[31] };
endmodule

(* dynports =  1  *)
(* src = "fp_mult.v:6" *)
module fp_mult(data_1, data_2, data_prod);
  (* src = "fp_mult.v:69" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _00_;
  (* src = "fp_mult.v:68" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 45 46 47" *)
  wire [47:0] _01_;
  (* src = "fp_mult.v:69" *)
  wire [31:0] _02_;
  (* src = "fp_mult.v:69" *)
  wire [31:0] _03_;
  (* src = "fp_mult.v:7" *)
  input [31:0] data_1;
  (* src = "fp_mult.v:23" *)
  wire [23:0] data_1_mult_in;
  (* src = "fp_mult.v:8" *)
  input [31:0] data_2;
  (* src = "fp_mult.v:24" *)
  wire [23:0] data_2_mult_in;
  (* src = "fp_mult.v:26" *)
  wire [8:0] data_exp;
  (* src = "fp_mult.v:9" *)
  output [31:0] data_prod;
  (* src = "fp_mult.v:21" *)
  wire [47:0] data_prod_full;
  (* src = "fp_mult.v:22" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 45 46" *)
  wire [46:0] data_prod_full_normalized;
  (* src = "fp_mult.v:28" *)
  wire [7:0] exp_final;
  (* src = "fp_mult.v:27" *)
  wire [5:0] shift_exp_by;
  (* src = "fp_mult.v:25" *)
  wire sign_bit;
  assign data_exp = data_1[30:23] + (* src = "fp_mult.v:48" *) data_2[30:23];
  assign { _00_[31:8], data_prod[30:23] } = _03_ + (* src = "fp_mult.v:69" *) 32'd1;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[22] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 3'h1, data_2[22:0], 22'h000000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[21] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 4'h1, data_2[22:0], 21'h000000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[20] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 5'h01, data_2[22:0], 20'h00000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[19] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 6'h01, data_2[22:0], 19'h00000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[18] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 7'h01, data_2[22:0], 18'h00000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[17] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 8'h01, data_2[22:0], 17'h00000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[16] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 9'h001, data_2[22:0], 16'h0000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[15] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 10'h001, data_2[22:0], 15'h0000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[14] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 11'h001, data_2[22:0], 14'h0000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[13] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 12'h001, data_2[22:0], 13'h0000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[12] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 13'h0001, data_2[22:0], 12'h000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[11] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 14'h0001, data_2[22:0], 11'h000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[10] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 15'h0001, data_2[22:0], 10'h000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[9] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 16'h0001, data_2[22:0], 9'h000 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[8] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 17'h00001, data_2[22:0], 8'h00 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[7] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 18'h00001, data_2[22:0], 7'h00 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[6] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 19'h00001, data_2[22:0], 6'h00 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[5] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 20'h00001, data_2[22:0], 5'h00 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[4] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 21'h000001, data_2[22:0], 4'h0 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[3] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 22'h000001, data_2[22:0], 3'h0 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[2] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 23'h000001, data_2[22:0], 2'h0 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[1] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 24'h000001, data_2[22:0], 1'h0 } : 48'h000000000000;
  assign { 2'h1, data_2[22:0], 23'h000000 } = data_1[0] ? (* full_case = 32'd1 *) (* src = "fp_mult.v:58" *) { 25'h0000001, data_2[22:0] } : 48'h000000000000;
  assign { _01_[47], data_prod_full_normalized[46:45], data_prod[22:0], data_prod_full_normalized[21:0] } = { 2'h1, data_2[22:0], 23'h000000 } << (* src = "fp_mult.v:68" *) shift_exp_by;
  assign _02_ = data_exp - (* src = "fp_mult.v:69" *) shift_exp_by;
  assign _03_ = _02_ - (* src = "fp_mult.v:69" *) 32'd127;
  assign sign_bit = data_1[31] ^ (* src = "fp_mult.v:47" *) data_2[31];
  (* src = "fp_mult.v:67" *)
  \$paramod\detect_pos_first_one\D_WIDTH=48  shift_for_exp (
    .data_i({ 2'h1, data_2[22:0], 23'h000000 }),
    .pos_o(shift_exp_by)
  );
  assign _00_[7:0] = data_prod[30:23];
  assign _01_[46:0] = { data_prod_full_normalized[46:45], data_prod[22:0], data_prod_full_normalized[21:0] };
  assign data_1_mult_in = { 1'h1, data_1[22:0] };
  assign data_2_mult_in = { 1'h1, data_2[22:0] };
  assign data_prod[31] = sign_bit;
  assign data_prod_full = { 2'h1, data_2[22:0], 23'h000000 };
  assign data_prod_full_normalized[44:22] = data_prod[22:0];
  assign exp_final = data_prod[30:23];
endmodule

(* dynports =  1  *)
(* src = "input_fifo.v:3" *)
module input_fifo(Clk, dataIn, RD, WR, EN, dataOut, Rst, EMPTY, FULL);
  (* src = "input_fifo.v:55" *)
  wire [5:0] _000_;
  (* src = "input_fifo.v:55" *)
  wire [38:0] _001_;
  (* src = "input_fifo.v:55" *)
  wire [38:0] _002_;
  (* src = "input_fifo.v:55" *)
  wire [4:0] _003_;
  (* src = "input_fifo.v:55" *)
  wire [4:0] _004_;
  (* src = "input_fifo.v:55" *)
  wire [4:0] _005_;
  (* src = "input_fifo.v:55" *)
  wire [4:0] _006_;
  (* src = "input_fifo.v:55" *)
  wire [4:0] _007_;
  (* src = "input_fifo.v:55" *)
  wire [4:0] _008_;
  (* src = "input_fifo.v:55" *)
  wire [4:0] _009_;
  (* src = "input_fifo.v:55" *)
  wire [4:0] _010_;
  (* src = "input_fifo.v:55" *)
  wire [4:0] _011_;
  (* src = "input_fifo.v:75" *)
  (* unused_bits = "5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _012_;
  (* src = "input_fifo.v:82" *)
  (* unused_bits = "5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire [38:0] _072_;
  (* src = "input_fifo.v:51" *)
  wire _073_;
  (* src = "input_fifo.v:100" *)
  wire _074_;
  (* src = "input_fifo.v:106" *)
  wire _075_;
  (* src = "input_fifo.v:71" *)
  wire _076_;
  (* src = "input_fifo.v:79" *)
  wire _077_;
  (* src = "input_fifo.v:79" *)
  wire _078_;
  wire [38:0] _079_;
  wire [38:0] _080_;
  wire [38:0] _081_;
  wire [38:0] _082_;
  wire [38:0] _083_;
  wire [38:0] _084_;
  wire [38:0] _085_;
  wire [38:0] _086_;
  wire [38:0] _087_;
  wire [38:0] _088_;
  wire [38:0] _089_;
  wire [38:0] _090_;
  wire [38:0] _091_;
  wire [38:0] _092_;
  wire [38:0] _093_;
  wire [38:0] _094_;
  wire [38:0] _095_;
  wire [38:0] _096_;
  wire [38:0] _097_;
  wire [38:0] _098_;
  wire [38:0] _099_;
  wire [38:0] _100_;
  wire [38:0] _101_;
  wire [38:0] _102_;
  wire [38:0] _103_;
  wire [38:0] _104_;
  wire [38:0] _105_;
  wire [38:0] _106_;
  wire [38:0] _107_;
  wire [38:0] _108_;
  wire [38:0] _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire [38:0] _142_;
  wire [38:0] _143_;
  wire [38:0] _144_;
  wire [38:0] _145_;
  wire [38:0] _146_;
  wire [38:0] _147_;
  wire [38:0] _148_;
  wire [38:0] _149_;
  wire [38:0] _150_;
  wire [38:0] _151_;
  wire [38:0] _152_;
  wire [38:0] _153_;
  wire [38:0] _154_;
  wire [38:0] _155_;
  wire [38:0] _156_;
  wire [38:0] _157_;
  wire [38:0] _158_;
  wire [38:0] _159_;
  wire [38:0] _160_;
  wire [38:0] _161_;
  wire [38:0] _162_;
  wire [38:0] _163_;
  wire [38:0] _164_;
  wire [38:0] _165_;
  wire [38:0] _166_;
  wire [38:0] _167_;
  wire [38:0] _168_;
  wire [38:0] _169_;
  wire [38:0] _170_;
  wire [38:0] _171_;
  wire [38:0] _172_;
  wire [38:0] _173_;
  (* src = "input_fifo.v:71" *)
  wire _174_;
  wire [38:0] _175_;
  wire [38:0] _176_;
  wire [38:0] _177_;
  wire [38:0] _178_;
  wire [38:0] _179_;
  wire [38:0] _180_;
  wire [5:0] _181_;
  wire [5:0] _182_;
  wire [5:0] _183_;
  (* src = "input_fifo.v:102" *)
  wire [4:0] _184_;
  (* src = "input_fifo.v:108" *)
  wire [4:0] _185_;
  (* src = "input_fifo.v:25" *)
  input Clk;
  (* init = 5'h00 *)
  (* src = "input_fifo.v:43" *)
  reg [4:0] Count = 5'h00;
  (* src = "input_fifo.v:35" *)
  output EMPTY;
  (* src = "input_fifo.v:25" *)
  input EN;
  reg [38:0] \FIFO[0] ;
  reg [38:0] \FIFO[10] ;
  reg [38:0] \FIFO[11] ;
  reg [38:0] \FIFO[12] ;
  reg [38:0] \FIFO[13] ;
  reg [38:0] \FIFO[14] ;
  reg [38:0] \FIFO[15] ;
  reg [38:0] \FIFO[16] ;
  reg [38:0] \FIFO[17] ;
  reg [38:0] \FIFO[18] ;
  reg [38:0] \FIFO[19] ;
  reg [38:0] \FIFO[1] ;
  reg [38:0] \FIFO[20] ;
  reg [38:0] \FIFO[21] ;
  reg [38:0] \FIFO[22] ;
  reg [38:0] \FIFO[23] ;
  reg [38:0] \FIFO[24] ;
  reg [38:0] \FIFO[25] ;
  reg [38:0] \FIFO[26] ;
  reg [38:0] \FIFO[27] ;
  reg [38:0] \FIFO[28] ;
  reg [38:0] \FIFO[29] ;
  reg [38:0] \FIFO[2] ;
  reg [38:0] \FIFO[30] ;
  reg [38:0] \FIFO[31] ;
  reg [38:0] \FIFO[3] ;
  reg [38:0] \FIFO[4] ;
  reg [38:0] \FIFO[5] ;
  reg [38:0] \FIFO[6] ;
  reg [38:0] \FIFO[7] ;
  reg [38:0] \FIFO[8] ;
  reg [38:0] \FIFO[9] ;
  (* src = "input_fifo.v:35" *)
  output FULL;
  (* src = "input_fifo.v:25" *)
  input RD;
  (* src = "input_fifo.v:25" *)
  input Rst;
  (* src = "input_fifo.v:25" *)
  input WR;
  (* src = "input_fifo.v:39" *)
  input [38:0] dataIn;
  (* src = "input_fifo.v:41" *)
  output [38:0] dataOut;
  reg [38:0] dataOut;
  (* init = 5'h00 *)
  (* src = "input_fifo.v:47" *)
  reg [4:0] readCounter = 5'h00;
  (* init = 5'h00 *)
  (* src = "input_fifo.v:47" *)
  reg [4:0] writeCounter = 5'h00;
  assign _012_ = readCounter + (* src = "input_fifo.v:75" *) 32'd1;
  assign _013_ = writeCounter + (* src = "input_fifo.v:82" *) 32'd1;
  assign _015_ = ! Rst;
  assign _014_ = & { EN, _076_, _015_ };
  assign _066_ = ~ _000_[0];
  assign _067_ = ~ _000_[1];
  assign _068_ = ~ _000_[2];
  assign _069_ = ~ _000_[3];
  assign _070_ = ~ _000_[4];
  assign _071_ = ~ _000_[5];
  assign _016_ = _067_ & _068_;
  assign _017_ = _066_ & _016_;
  assign _018_ = _070_ & _071_;
  assign _019_ = _069_ & _018_;
  assign _020_ = _017_ & _019_;
  assign _021_ = _000_[0] & _016_;
  assign _022_ = _021_ & _019_;
  assign _023_ = _000_[1] & _068_;
  assign _024_ = _066_ & _023_;
  assign _025_ = _024_ & _019_;
  assign _026_ = _000_[0] & _023_;
  assign _027_ = _026_ & _019_;
  assign _028_ = _067_ & _000_[2];
  assign _029_ = _066_ & _028_;
  assign _030_ = _029_ & _019_;
  assign _031_ = _000_[0] & _028_;
  assign _032_ = _031_ & _019_;
  assign _033_ = _000_[1] & _000_[2];
  assign _034_ = _066_ & _033_;
  assign _035_ = _034_ & _019_;
  assign _036_ = _000_[0] & _033_;
  assign _037_ = _036_ & _019_;
  assign _038_ = _000_[3] & _018_;
  assign _039_ = _017_ & _038_;
  assign _040_ = _021_ & _038_;
  assign _041_ = _024_ & _038_;
  assign _042_ = _026_ & _038_;
  assign _043_ = _029_ & _038_;
  assign _044_ = _031_ & _038_;
  assign _045_ = _034_ & _038_;
  assign _046_ = _036_ & _038_;
  assign _047_ = _000_[4] & _071_;
  assign _048_ = _069_ & _047_;
  assign _049_ = _017_ & _048_;
  assign _050_ = _021_ & _048_;
  assign _051_ = _024_ & _048_;
  assign _052_ = _026_ & _048_;
  assign _053_ = _029_ & _048_;
  assign _054_ = _031_ & _048_;
  assign _055_ = _034_ & _048_;
  assign _056_ = _036_ & _048_;
  assign _057_ = _000_[3] & _047_;
  assign _058_ = _017_ & _057_;
  assign _059_ = _021_ & _057_;
  assign _060_ = _024_ & _057_;
  assign _061_ = _026_ & _057_;
  assign _062_ = _029_ & _057_;
  assign _063_ = _031_ & _057_;
  assign _064_ = _034_ & _057_;
  assign _065_ = _036_ & _057_;
  assign _073_ = ! (* src = "input_fifo.v:51" *) Count;
  assign _074_ = _004_ > (* src = "input_fifo.v:100" *) _005_;
  assign _075_ = _005_ > (* src = "input_fifo.v:106" *) _004_;
  assign _076_ = RD && (* src = "input_fifo.v:71" *) _174_;
  assign _077_ = WR && (* src = "input_fifo.v:79" *) _078_;
  assign _078_ = Count < (* src = "input_fifo.v:79" *) 32'd32;
  assign _072_ = _014_ ? _079_ : dataOut;
  assign _079_ = readCounter[4] ? _081_ : _080_;
  assign _080_ = readCounter[3] ? _083_ : _082_;
  assign _081_ = readCounter[3] ? _085_ : _084_;
  assign _082_ = readCounter[2] ? _087_ : _086_;
  assign _083_ = readCounter[2] ? _089_ : _088_;
  assign _084_ = readCounter[2] ? _091_ : _090_;
  assign _085_ = readCounter[2] ? _093_ : _092_;
  assign _086_ = readCounter[1] ? _095_ : _094_;
  assign _087_ = readCounter[1] ? _097_ : _096_;
  assign _088_ = readCounter[1] ? _099_ : _098_;
  assign _089_ = readCounter[1] ? _101_ : _100_;
  assign _090_ = readCounter[1] ? _103_ : _102_;
  assign _091_ = readCounter[1] ? _105_ : _104_;
  assign _092_ = readCounter[1] ? _107_ : _106_;
  assign _093_ = readCounter[1] ? _109_ : _108_;
  assign _094_ = readCounter[0] ? \FIFO[1]  : \FIFO[0] ;
  assign _104_ = readCounter[0] ? \FIFO[21]  : \FIFO[20] ;
  assign _105_ = readCounter[0] ? \FIFO[23]  : \FIFO[22] ;
  assign _106_ = readCounter[0] ? \FIFO[25]  : \FIFO[24] ;
  assign _107_ = readCounter[0] ? \FIFO[27]  : \FIFO[26] ;
  assign _108_ = readCounter[0] ? \FIFO[29]  : \FIFO[28] ;
  assign _109_ = readCounter[0] ? \FIFO[31]  : \FIFO[30] ;
  assign _095_ = readCounter[0] ? \FIFO[3]  : \FIFO[2] ;
  assign _096_ = readCounter[0] ? \FIFO[5]  : \FIFO[4] ;
  assign _097_ = readCounter[0] ? \FIFO[7]  : \FIFO[6] ;
  assign _098_ = readCounter[0] ? \FIFO[9]  : \FIFO[8] ;
  assign _099_ = readCounter[0] ? \FIFO[11]  : \FIFO[10] ;
  assign _100_ = readCounter[0] ? \FIFO[13]  : \FIFO[12] ;
  assign _101_ = readCounter[0] ? \FIFO[15]  : \FIFO[14] ;
  assign _102_ = readCounter[0] ? \FIFO[17]  : \FIFO[16] ;
  assign _103_ = readCounter[0] ? \FIFO[19]  : \FIFO[18] ;
  always @(posedge Clk)
      dataOut <= _072_;
  assign _110_ = _020_ & _002_[38];
  assign _111_ = _041_ & _002_[38];
  assign _112_ = _042_ & _002_[38];
  assign _113_ = _043_ & _002_[38];
  assign _114_ = _044_ & _002_[38];
  assign _115_ = _045_ & _002_[38];
  assign _116_ = _046_ & _002_[38];
  assign _117_ = _049_ & _002_[38];
  assign _118_ = _050_ & _002_[38];
  assign _119_ = _051_ & _002_[38];
  assign _120_ = _052_ & _002_[38];
  assign _121_ = _022_ & _002_[38];
  assign _122_ = _053_ & _002_[38];
  assign _123_ = _054_ & _002_[38];
  assign _124_ = _055_ & _002_[38];
  assign _125_ = _056_ & _002_[38];
  assign _126_ = _058_ & _002_[38];
  assign _127_ = _059_ & _002_[38];
  assign _128_ = _060_ & _002_[38];
  assign _129_ = _061_ & _002_[38];
  assign _130_ = _062_ & _002_[38];
  assign _131_ = _063_ & _002_[38];
  assign _132_ = _025_ & _002_[38];
  assign _133_ = _064_ & _002_[38];
  assign _134_ = _065_ & _002_[38];
  assign _135_ = _027_ & _002_[38];
  assign _136_ = _030_ & _002_[38];
  assign _137_ = _032_ & _002_[38];
  assign _138_ = _035_ & _002_[38];
  assign _139_ = _037_ & _002_[38];
  assign _140_ = _039_ & _002_[38];
  assign _141_ = _040_ & _002_[38];
  assign _142_ = _110_ ? _001_ : \FIFO[0] ;
  assign _143_ = _111_ ? _001_ : \FIFO[10] ;
  assign _144_ = _112_ ? _001_ : \FIFO[11] ;
  assign _145_ = _113_ ? _001_ : \FIFO[12] ;
  assign _146_ = _114_ ? _001_ : \FIFO[13] ;
  assign _147_ = _115_ ? _001_ : \FIFO[14] ;
  assign _148_ = _116_ ? _001_ : \FIFO[15] ;
  assign _149_ = _117_ ? _001_ : \FIFO[16] ;
  assign _150_ = _118_ ? _001_ : \FIFO[17] ;
  assign _151_ = _119_ ? _001_ : \FIFO[18] ;
  assign _152_ = _120_ ? _001_ : \FIFO[19] ;
  assign _153_ = _121_ ? _001_ : \FIFO[1] ;
  assign _154_ = _122_ ? _001_ : \FIFO[20] ;
  assign _155_ = _123_ ? _001_ : \FIFO[21] ;
  assign _156_ = _124_ ? _001_ : \FIFO[22] ;
  assign _157_ = _125_ ? _001_ : \FIFO[23] ;
  assign _158_ = _126_ ? _001_ : \FIFO[24] ;
  assign _159_ = _127_ ? _001_ : \FIFO[25] ;
  assign _160_ = _128_ ? _001_ : \FIFO[26] ;
  assign _161_ = _129_ ? _001_ : \FIFO[27] ;
  assign _162_ = _130_ ? _001_ : \FIFO[28] ;
  assign _163_ = _131_ ? _001_ : \FIFO[29] ;
  assign _164_ = _132_ ? _001_ : \FIFO[2] ;
  assign _165_ = _133_ ? _001_ : \FIFO[30] ;
  assign _166_ = _134_ ? _001_ : \FIFO[31] ;
  assign _167_ = _135_ ? _001_ : \FIFO[3] ;
  assign _168_ = _136_ ? _001_ : \FIFO[4] ;
  assign _169_ = _137_ ? _001_ : \FIFO[5] ;
  assign _170_ = _138_ ? _001_ : \FIFO[6] ;
  assign _171_ = _139_ ? _001_ : \FIFO[7] ;
  assign _172_ = _140_ ? _001_ : \FIFO[8] ;
  assign _173_ = _141_ ? _001_ : \FIFO[9] ;
  always @(posedge Clk)
      \FIFO[0]  <= _142_;
  always @(posedge Clk)
      \FIFO[10]  <= _143_;
  always @(posedge Clk)
      \FIFO[11]  <= _144_;
  always @(posedge Clk)
      \FIFO[12]  <= _145_;
  always @(posedge Clk)
      \FIFO[13]  <= _146_;
  always @(posedge Clk)
      \FIFO[14]  <= _147_;
  always @(posedge Clk)
      \FIFO[15]  <= _148_;
  always @(posedge Clk)
      \FIFO[16]  <= _149_;
  always @(posedge Clk)
      \FIFO[17]  <= _150_;
  always @(posedge Clk)
      \FIFO[18]  <= _151_;
  always @(posedge Clk)
      \FIFO[19]  <= _152_;
  always @(posedge Clk)
      \FIFO[1]  <= _153_;
  always @(posedge Clk)
      \FIFO[20]  <= _154_;
  always @(posedge Clk)
      \FIFO[21]  <= _155_;
  always @(posedge Clk)
      \FIFO[22]  <= _156_;
  always @(posedge Clk)
      \FIFO[23]  <= _157_;
  always @(posedge Clk)
      \FIFO[24]  <= _158_;
  always @(posedge Clk)
      \FIFO[25]  <= _159_;
  always @(posedge Clk)
      \FIFO[26]  <= _160_;
  always @(posedge Clk)
      \FIFO[27]  <= _161_;
  always @(posedge Clk)
      \FIFO[28]  <= _162_;
  always @(posedge Clk)
      \FIFO[29]  <= _163_;
  always @(posedge Clk)
      \FIFO[2]  <= _164_;
  always @(posedge Clk)
      \FIFO[30]  <= _165_;
  always @(posedge Clk)
      \FIFO[31]  <= _166_;
  always @(posedge Clk)
      \FIFO[3]  <= _167_;
  always @(posedge Clk)
      \FIFO[4]  <= _168_;
  always @(posedge Clk)
      \FIFO[5]  <= _169_;
  always @(posedge Clk)
      \FIFO[6]  <= _170_;
  always @(posedge Clk)
      \FIFO[7]  <= _171_;
  always @(posedge Clk)
      \FIFO[8]  <= _172_;
  always @(posedge Clk)
      \FIFO[9]  <= _173_;
  assign _174_ = | (* src = "input_fifo.v:71" *) Count;
  always @(posedge Clk)
      Count <= _003_;
  always @(posedge Clk)
      readCounter <= _004_;
  always @(posedge Clk)
      writeCounter <= _005_;
  assign _006_ = _075_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:106" *) _185_ : Count;
  assign _003_ = _074_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:100" *) _184_ : _006_;
  assign _011_ = _077_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:79" *) _013_[4:0] : writeCounter;
  assign _009_ = _076_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:71" *) _012_[4:0] : readCounter;
  assign _010_ = _076_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:71" *) writeCounter : _011_;
  assign _008_ = Rst ? (* full_case = 32'd1 *) (* src = "input_fifo.v:63" *) 5'h00 : _010_;
  assign _007_ = Rst ? (* full_case = 32'd1 *) (* src = "input_fifo.v:63" *) 5'h00 : _009_;
  assign _005_ = EN ? (* full_case = 32'd1 *) (* src = "input_fifo.v:59" *) _008_ : writeCounter;
  assign _004_ = EN ? (* full_case = 32'd1 *) (* src = "input_fifo.v:59" *) _007_ : readCounter;
  assign _175_[38] = _077_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:79" *) 1'h1 : 1'h0;
  assign _176_[38] = _076_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:71" *) 1'h0 : _175_[38];
  assign _177_[38] = Rst ? (* full_case = 32'd1 *) (* src = "input_fifo.v:63" *) 1'h0 : _176_[38];
  assign _002_[38] = EN ? (* full_case = 32'd1 *) (* src = "input_fifo.v:59" *) _177_[38] : 1'h0;
  assign _178_ = _077_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:79" *) dataIn : 39'hxxxxxxxxxx;
  assign _179_ = _076_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:71" *) 39'hxxxxxxxxxx : _178_;
  assign _180_ = Rst ? (* full_case = 32'd1 *) (* src = "input_fifo.v:63" *) 39'hxxxxxxxxxx : _179_;
  assign _001_ = EN ? (* full_case = 32'd1 *) (* src = "input_fifo.v:59" *) _180_ : 39'hxxxxxxxxxx;
  assign _181_ = _077_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:79" *) { 1'h0, writeCounter } : 6'hxx;
  assign _182_ = _076_ ? (* full_case = 32'd1 *) (* src = "input_fifo.v:71" *) 6'hxx : _181_;
  assign _183_ = Rst ? (* full_case = 32'd1 *) (* src = "input_fifo.v:63" *) 6'hxx : _182_;
  assign _000_ = EN ? (* full_case = 32'd1 *) (* src = "input_fifo.v:59" *) _183_ : 6'hxx;
  assign _184_ = _004_ - (* src = "input_fifo.v:102" *) _005_;
  assign _185_ = _005_ - (* src = "input_fifo.v:108" *) _004_;
  assign EMPTY = _073_ ? (* src = "input_fifo.v:51" *) 1'h1 : 1'h0;
  assign _002_[37:0] = { _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38], _002_[38] };
  assign _175_[37:0] = { _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38], _175_[38] };
  assign _176_[37:0] = { _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38], _176_[38] };
  assign _177_[37:0] = { _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38], _177_[38] };
  assign FULL = 1'h0;
endmodule

(* dynports =  1  *)
(* src = "input_interface.v:7" *)
module input_interface(clk, rst_n, pkt_valid, op_pkt__data, op_pkt__mode, op_pkt__res, fifo_pop, pkt_dropd, ready, in_fifo_data_o, in_fifo_mode_o, in_fifo_res_o, op_pkt_available);
  (* src = "input_interface.v:37" *)
  wire [38:0] chkd_pkt;
  (* src = "input_interface.v:8" *)
  input clk;
  (* src = "input_interface.v:36" *)
  wire [38:0] fifo_data_out;
  (* src = "input_interface.v:35" *)
  wire fifo_empty;
  (* src = "input_interface.v:14" *)
  input fifo_pop;
  (* src = "input_interface.v:34" *)
  wire fifo_push;
  (* src = "input_interface.v:18" *)
  output [31:0] in_fifo_data_o;
  (* src = "input_interface.v:19" *)
  output [2:0] in_fifo_mode_o;
  (* src = "input_interface.v:20" *)
  output [3:0] in_fifo_res_o;
  (* src = "input_interface.v:33" *)
  wire n_ready;
  (* src = "input_interface.v:11" *)
  input [31:0] op_pkt__data;
  (* src = "input_interface.v:12" *)
  input [2:0] op_pkt__mode;
  (* src = "input_interface.v:13" *)
  input [3:0] op_pkt__res;
  (* src = "input_interface.v:21" *)
  output op_pkt_available;
  (* src = "input_interface.v:16" *)
  output pkt_dropd;
  (* src = "input_interface.v:10" *)
  input pkt_valid;
  (* src = "input_interface.v:17" *)
  output ready;
  (* src = "input_interface.v:9" *)
  input rst_n;
  assign ready = ~ (* src = "input_interface.v:43" *) n_ready;
  assign op_pkt_available = ~ (* src = "input_interface.v:44" *) fifo_empty;
  (* module_not_derived = 32'd1 *)
  (* src = "input_interface.v:67" *)
  input_fifo in_fifo (
    .Clk(clk),
    .EMPTY(fifo_empty),
    .EN(1'h1),
    .FULL(n_ready),
    .RD(fifo_pop),
    .Rst(rst_n),
    .WR(fifo_push),
    .dataIn(chkd_pkt),
    .dataOut(fifo_data_out)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "input_interface.v:53" *)
  op_pkt_chk pkt_chk (
    .clk(clk),
    .pkt_dropd(pkt_dropd),
    .pkt_good(fifo_push),
    .pkt_i({ op_pkt__res, op_pkt__mode, op_pkt__data }),
    .pkt_in_valid(pkt_valid),
    .pkt_o(chkd_pkt),
    .rst_n(rst_n)
  );
  assign in_fifo_data_o = fifo_data_out[31:0];
  assign in_fifo_mode_o = fifo_data_out[34:32];
  assign in_fifo_res_o = fifo_data_out[38:35];
endmodule

(* dynports =  1  *)
(* src = "op_pkt_chk.v:5" *)
module op_pkt_chk(clk, rst_n, pkt_in_valid, pkt_i, pkt_good, pkt_dropd, pkt_o);
  (* src = "op_pkt_chk.v:41" *)
  wire _00_;
  (* src = "op_pkt_chk.v:41" *)
  wire _01_;
  (* src = "op_pkt_chk.v:41" *)
  wire [38:0] _02_;
  (* src = "op_pkt_chk.v:34" *)
  wire _03_;
  (* src = "op_pkt_chk.v:49" *)
  wire _04_;
  (* src = "op_pkt_chk.v:49" *)
  wire _05_;
  (* src = "op_pkt_chk.v:49" *)
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire [38:0] _11_;
  wire [38:0] _12_;
  (* src = "op_pkt_chk.v:34" *)
  wire _13_;
  (* src = "op_pkt_chk.v:34" *)
  wire _14_;
  (* src = "op_pkt_chk.v:6" *)
  input clk;
  (* src = "op_pkt_chk.v:26" *)
  wire is_mode_onehot;
  (* src = "op_pkt_chk.v:27" *)
  wire is_res_greater_than_5;
  (* src = "op_pkt_chk.v:25" *)
  wire [2:0] mode_int;
  (* src = "op_pkt_chk.v:11" *)
  output pkt_dropd;
  reg pkt_dropd;
  (* src = "op_pkt_chk.v:10" *)
  output pkt_good;
  reg pkt_good;
  (* src = "op_pkt_chk.v:9" *)
  input [38:0] pkt_i;
  (* src = "op_pkt_chk.v:8" *)
  input pkt_in_valid;
  (* src = "op_pkt_chk.v:12" *)
  output [38:0] pkt_o;
  reg [38:0] pkt_o;
  (* src = "op_pkt_chk.v:24" *)
  wire [3:0] res_int;
  (* src = "op_pkt_chk.v:7" *)
  input rst_n;
  assign is_mode_onehot = _14_ & (* src = "op_pkt_chk.v:34" *) _03_;
  assign is_res_greater_than_5 = pkt_i[38:35] > (* src = "op_pkt_chk.v:35" *) 4'h5;
  assign _03_ = ~ (* src = "op_pkt_chk.v:34" *) _13_;
  assign _04_ = ~ (* src = "op_pkt_chk.v:49" *) is_mode_onehot;
  assign _05_ = ~ (* src = "op_pkt_chk.v:49" *) is_res_greater_than_5;
  assign _06_ = _04_ | (* src = "op_pkt_chk.v:49" *) _05_;
  always @(posedge clk)
      pkt_o <= _02_;
  always @(posedge clk)
      pkt_good <= _01_;
  always @(posedge clk)
      pkt_dropd <= _00_;
  assign _07_ = _06_ ? (* full_case = 32'd1 *) (* src = "op_pkt_chk.v:49" *) 1'h1 : 1'h0;
  assign _08_ = pkt_in_valid ? (* full_case = 32'd1 *) (* src = "op_pkt_chk.v:48" *) _07_ : 1'h0;
  assign _00_ = rst_n ? (* full_case = 32'd1 *) (* src = "op_pkt_chk.v:42" *) 1'h0 : _08_;
  assign _09_ = _06_ ? (* full_case = 32'd1 *) (* src = "op_pkt_chk.v:49" *) 1'h0 : 1'h1;
  assign _10_ = pkt_in_valid ? (* full_case = 32'd1 *) (* src = "op_pkt_chk.v:48" *) _09_ : 1'h0;
  assign _01_ = rst_n ? (* full_case = 32'd1 *) (* src = "op_pkt_chk.v:42" *) 1'h0 : _10_;
  assign _11_ = _06_ ? (* full_case = 32'd1 *) (* src = "op_pkt_chk.v:49" *) 39'h0000000000 : pkt_i;
  assign _12_ = pkt_in_valid ? (* full_case = 32'd1 *) (* src = "op_pkt_chk.v:48" *) _11_ : 39'h0000000000;
  assign _02_ = rst_n ? (* full_case = 32'd1 *) (* src = "op_pkt_chk.v:42" *) 39'h0000000000 : _12_;
  assign _13_ = & (* src = "op_pkt_chk.v:34" *) { pkt_i[32], pkt_i[33], pkt_i[34] };
  assign _14_ = ^ (* src = "op_pkt_chk.v:34" *) pkt_i[34:32];
  assign mode_int = pkt_i[34:32];
  assign res_int = pkt_i[38:35];
endmodule

(* dynports =  1  *)
(* src = "design.sv:7" *)
module sci_acc_top(clk, rst_n, pkt_valid, op_pkt__data, op_pkt__mode, op_pkt__res, pkt_dropd, ready, data_out, done);
  (* src = "design.sv:8" *)
  input clk;
  (* src = "design.sv:17" *)
  output [31:0] data_out;
  (* src = "design.sv:18" *)
  output done;
  (* src = "design.sv:30" *)
  wire fifo_pop;
  (* src = "design.sv:32" *)
  wire [31:0] final_value;
  (* src = "design.sv:34" *)
  wire [2:0] mode;
  (* src = "design.sv:31" *)
  wire op_done;
  (* src = "design.sv:11" *)
  input [31:0] op_pkt__data;
  (* src = "design.sv:12" *)
  input [2:0] op_pkt__mode;
  (* src = "design.sv:13" *)
  input [3:0] op_pkt__res;
  (* src = "design.sv:35" *)
  wire op_pkt_available;
  (* src = "design.sv:15" *)
  output pkt_dropd;
  (* src = "design.sv:10" *)
  input pkt_valid;
  (* src = "design.sv:16" *)
  output ready;
  (* src = "design.sv:33" *)
  wire [3:0] res;
  (* src = "design.sv:9" *)
  input rst_n;
  (* src = "design.sv:36" *)
  wire [31:0] x_value;
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:49" *)
  input_interface input_intf (
    .clk(clk),
    .fifo_pop(fifo_pop),
    .in_fifo_data_o(x_value),
    .in_fifo_mode_o(mode),
    .in_fifo_res_o(res),
    .op_pkt__data(op_pkt__data),
    .op_pkt__mode(op_pkt__mode),
    .op_pkt__res(op_pkt__res),
    .op_pkt_available(op_pkt_available),
    .pkt_dropd(pkt_dropd),
    .pkt_valid(pkt_valid),
    .ready(ready),
    .rst_n(rst_n)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:71" *)
  sci_compute_core sci_compute_core (
    .clk(clk),
    .data_x(x_value),
    .fifo_pop(fifo_pop),
    .final_value(final_value),
    .mode(mode),
    .op_done(op_done),
    .op_pkt_available(op_pkt_available),
    .res(res),
    .rst_n(rst_n)
  );
  assign data_out = final_value;
  assign done = op_done;
endmodule

(* dynports =  1  *)
(* src = "sci_compute_core.v:11" *)
module sci_compute_core(clk, rst_n, op_pkt_available, res, mode, data_x, final_value, fifo_pop, op_done);
  (* unused_bits = "0" *)
  wire _0_;
  (* src = "sci_compute_core.v:37" *)
  wire [31:0] arith_out;
  (* src = "sci_compute_core.v:12" *)
  input clk;
  (* src = "sci_compute_core.v:36" *)
  wire [31:0] coeff_prod;
  (* src = "sci_compute_core.v:35" *)
  wire [31:0] coeff_value;
  (* src = "sci_compute_core.v:17" *)
  input [31:0] data_x;
  (* src = "sci_compute_core.v:20" *)
  output fifo_pop;
  (* src = "sci_compute_core.v:19" *)
  output [31:0] final_value;
  (* src = "sci_compute_core.v:16" *)
  input [2:0] mode;
  (* src = "sci_compute_core.v:21" *)
  output op_done;
  (* src = "sci_compute_core.v:14" *)
  input op_pkt_available;
  (* src = "sci_compute_core.v:40" *)
  wire op_sel;
  (* src = "sci_compute_core.v:43" *)
  wire rd;
  (* src = "sci_compute_core.v:15" *)
  input [3:0] res;
  (* src = "sci_compute_core.v:13" *)
  input rst_n;
  (* src = "sci_compute_core.v:42" *)
  wire start_cntr;
  (* src = "sci_compute_core.v:34" *)
  wire [31:0] stg1_dout;
  (* src = "sci_compute_core.v:38" *)
  wire stg1_en;
  (* src = "sci_compute_core.v:39" *)
  wire stg2_en;
  (* src = "sci_compute_core.v:41" *)
  wire [3:0] term_cnt;
  (* src = "sci_compute_core.v:33" *)
  wire [31:0] x_power_term;
  (* module_not_derived = 32'd1 *)
  (* src = "sci_compute_core.v:118" *)
  fp_mult coeff_mult (
    .data_1(coeff_value),
    .data_2(x_power_term),
    .data_prod(coeff_prod)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "sci_compute_core.v:71" *)
  coeff_rom coeff_rom (
    .clk(clk),
    .coeff_out(coeff_value),
    .rd(rd),
    .rd_addr({ 2'h0, term_cnt }),
    .rst_n(rst_n)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "sci_compute_core.v:49" *)
  control_fsm control_fsm (
    .clk(clk),
    .done(op_done),
    .mode(mode),
    .op(op_sel),
    .op_pkt_available(op_pkt_available),
    .rd_coeff(),
    .rd_fifo(fifo_pop),
    .res(res),
    .rst_n(rst_n),
    .start_cnt(start_cntr),
    .stg1_en(stg1_en),
    .stg2_en(stg2_en),
    .term_cnt(term_cnt)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "sci_compute_core.v:128" *)
  fp_arith fp_arith (
    .data_1(final_value),
    .data_2(coeff_prod),
    .data_o(arith_out),
    .en(stg2_en),
    .op_sel(op_sel)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "sci_compute_core.v:82" *)
  term_counter term_counter (
    .clk(clk),
    .coeff_rd_en(rd),
    .done(op_done),
    .rst_n(rst_n),
    .start_cntr(start_cntr),
    .term_cnt({ _0_, term_cnt })
  );
  (* module_not_derived = 32'd1 *)
  (* src = "sci_compute_core.v:140" *)
  accumulator value_accum (
    .accum_data_out(final_value),
    .clk(clk),
    .data_in(arith_out),
    .rst_n(rst_n),
    .stg_en(stg2_en)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "sci_compute_core.v:106" *)
  accumulator x_power_accum (
    .accum_data_out(x_power_term),
    .clk(clk),
    .data_in(stg1_dout),
    .rst_n(rst_n),
    .stg_en(stg1_en)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "sci_compute_core.v:96" *)
  fp_mult x_power_fp_mult (
    .data_1(x_power_term),
    .data_2(data_x),
    .data_prod(stg1_dout)
  );
endmodule

(* dynports =  1  *)
(* src = "term_counter.v:5" *)
module term_counter(clk, rst_n, start_cntr, done, coeff_rd_en, term_cnt);
  (* src = "term_counter.v:34" *)
  wire _00_;
  (* src = "term_counter.v:48" *)
  wire [4:0] _01_;
  (* src = "term_counter.v:57" *)
  (* unused_bits = "5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _02_;
  (* src = "term_counter.v:56" *)
  wire _03_;
  (* src = "term_counter.v:56" *)
  wire _04_;
  wire [4:0] _05_;
  wire [4:0] _06_;
  wire _07_;
  wire _08_;
  (* src = "term_counter.v:6" *)
  input clk;
  (* src = "term_counter.v:23" *)
  reg cntr_en;
  (* src = "term_counter.v:10" *)
  output coeff_rd_en;
  (* src = "term_counter.v:9" *)
  input done;
  (* src = "term_counter.v:7" *)
  input rst_n;
  (* src = "term_counter.v:8" *)
  input start_cntr;
  (* src = "term_counter.v:11" *)
  output [4:0] term_cnt;
  reg [4:0] term_cnt;
  assign _02_ = term_cnt + (* src = "term_counter.v:57" *) 32'd1;
  assign _03_ = cntr_en & (* src = "term_counter.v:56" *) _04_;
  assign _04_ = ~ (* src = "term_counter.v:56" *) done;
  always @(posedge clk)
      term_cnt <= _01_;
  always @(posedge clk)
      cntr_en <= _00_;
  assign _05_ = _03_ ? (* full_case = 32'd1 *) (* src = "term_counter.v:56" *) _02_[4:0] : 5'h00;
  assign _06_ = start_cntr ? (* full_case = 32'd1 *) (* src = "term_counter.v:53" *) 5'h00 : _05_;
  assign _01_ = rst_n ? (* full_case = 32'd1 *) (* src = "term_counter.v:49" *) 5'h00 : _06_;
  assign _07_ = start_cntr ? (* src = "term_counter.v:39" *) 1'h1 : cntr_en;
  assign _08_ = done ? (* src = "term_counter.v:40" *) 1'h0 : _07_;
  assign _00_ = rst_n ? (* full_case = 32'd1 *) (* src = "term_counter.v:35" *) 1'h0 : _08_;
  assign coeff_rd_en = cntr_en;
endmodule
